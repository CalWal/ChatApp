{"version":3,"sources":["logo.svg","components/Message.js","components/MessageList.js","components/SendMessageForm.js","components/RoomList.js","components/NewRoomForm.js","App.js","config.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Message","props","react_default","a","createElement","className","username","text","MessageList","node","ReactDOM","findDOMNode","this","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","roomId","messages","map","message","index","components_Message","key","senderId","React","Component","SendMessageForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","target","value","preventDefault","sendMessage","onSubmit","disabled","onChange","placeholder","type","RoomList","orderedRooms","toConsumableArray","rooms","sort","b","id","room","active","onClick","subscribeToRoom","href","name","NewRoomForm","roomName","createRoom","required","App","joinableRooms","joinedRooms","getRooms","_this2","Chatkit","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","catch","error","console","_this3","getJoinableRooms","_this4","hooks","onMessage","concat","_this5","log","components_RoomList","components_MessageList","components_SendMessageForm","components_NewRoomForm","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18fd38a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\n\nfunction Message(props){\n  return (\n    <div className=\"message\">\n      <div className=\"message-username\"> {props.username} </div>\n      <div className=\"message-text\">{props.text}</div>\n\n\n    </div>\n  )\n}\n\nexport default Message\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom'\nimport Message from \"./Message.js\"\n\nclass MessageList extends React.Component{\n\n  componentWillUpdate() {\n       const node = ReactDOM.findDOMNode(this)\n       this.shouldScrollToBottom = node.scrollTop + node.clientHeight+ 100 >= node.scrollHeight\n   }\n\n  componentDidUpdate(){\n\n    if(this.shouldScrollToBottom){\n    const node = ReactDOM.findDOMNode(this)\n    node.scrollTop = node.scrollHeight\n  }\n}\n\n  render(){\n    if (!this.props.roomId) {\n      return(\n                         <div className=\"message-list\">\n                     <div className=\"join-room\">\n                         &larr; Join a room!\n                     </div>\n                 </div>\n               )\n         }\n\n    return(\n    <div className=\"message-list\">\n      {this.props.messages.map((message,index)=>{\n        return(\n\n        <Message\n            key={index}\n            username={message.senderId}\n            text={message.text}\n          />\n\n\n\n\n\n        )\n      })}\n    </div>\n\n)\n    }\n\n}\n\n\nexport default MessageList\n","import React from 'react'\n\nclass SendMessageForm extends React.Component{\n\n  constructor(){\n    super()\n    this.state ={\n      message: ''\n    }\n    this.handleChange= this.handleChange.bind(this)\n    this.handleSubmit= this.handleSubmit.bind(this)\n  }\n\n  handleChange(e){\n    this.setState({\n      message: e.target.value\n    })\n  }\n\n  handleSubmit(e){\n  e.preventDefault()\n    this.props.sendMessage(this.state.message)\n    this.setState({\n      message: ''\n    })\n  }\n\n  render(){\n\n\n    return(\n      <form className=\"send-message-form\" onSubmit={this.handleSubmit}>\n        <input\n          disabled = {this.props.disabled}\n          onChange={this.handleChange}\n          placeholder=\"Type Your Message And Hit ENTER\"\n          type=\"text\"\n          />\n\n      </form>\n    )\n  }\n}\n\nexport default SendMessageForm\n","import React from 'react'\n\nclass RoomList extends React.Component {\n    render () {\n      const orderedRooms = [...this.props.rooms].sort((a,b)=> a.id - b.id)\n        return (\n            <div className=\"rooms-list\">\n            <ul>\n                <h3>Your Rooms:</h3>\n                {orderedRooms.map(room =>{\n                  const active = this.props.roomId === room.id ? \"active \": \"\";\n                  return(\n                    <li key={room.id} className={\"room \" + active }>\n                      <a onClick={ () => this.props.subscribeToRoom(room.id)}\n                        href=\"#\">{room.name}\n                      </a>\n                    </li>\n                  )\n                })}\n\n            </ul>\n            </div>\n        )\n    }\n}\n\nexport default RoomList\n","import React from 'react'\n\nclass NewRoomForm extends React.Component {\n\n  constructor(){\n    super()\n    this.state={\n      roomName: ''\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n    handleChange(e){\n      this.setState({\n        roomName: e.target.value\n      })\n    }\n\n    handleSubmit(e){\n      e.preventDefault()\n      this.props.createRoom(this.state.roomName)\n      this.setState({roomName: ''})\n    }\n\n    render () {\n        return (\n            <div className=\"new-room-form\">\n                <form onSubmit={this.handleSubmit}>\n                    <input\n                        value = {this.state.roomName}\n                        onChange={this.handleChange}\n                        type=\"text\"\n                        placeholder=\"Create A Room\"\n                        required />\n                    <button id=\"create-room-btn\" type=\"submit\">+</button>\n            </form>\n        </div>\n        )\n    }\n}\n\nexport default NewRoomForm\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Chatkit from '@pusher/chatkit-client'\n\nimport {tokenURL, instanceLocator} from \"./config.js\"\n\n\nimport MessageList from \"./components/MessageList\"\nimport SendMessageForm from \"./components/SendMessageForm\"\nimport RoomList from \"./components/RoomList\"\nimport NewRoomForm from \"./components/NewRoomForm\"\n\nclass App extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      roomId: null,\n      messages: [],\n      joinableRooms: [],\n      joinedRooms: []\n    }\n    this.sendMessage = this.sendMessage.bind(this)\n    this.subscribeToRoom = this.subscribeToRoom.bind(this)\n    this.getRooms = this.getRooms.bind(this)\n    this.createRoom = this.createRoom.bind(this)\n  }\n\ncomponentDidMount(){\n  const chatManager = new Chatkit.ChatManager({\n    instanceLocator,\n    userId: 'Callum',\n    tokenProvider: new Chatkit.TokenProvider({\n      url: tokenURL\n    })\n  })\n\n\n  chatManager\n    .connect()\n      .then(currentUser => {\n        this.currentUser = currentUser\n        this.getRooms()\n      })\n      .catch(error => {\n        console.error(\"error:\", error)\n      })\n\n\n\n}\n  getRooms(){\n    this.currentUser.getJoinableRooms()\n    .then(joinableRooms =>{\n      this.setState({\n        joinableRooms,\n        joinedRooms: this.currentUser.rooms\n      })\n    })\n  }\n\n  subscribeToRoom(roomId){\n    this.setState({\n      messages: []\n    })\n    this.currentUser.subscribeToRoom({\n      roomId: roomId,\n      hooks: {\n        onMessage: message => {\n          this.setState({\n            messages: [...this.state.messages, message]\n          })\n        }\n      }\n    })\n    .then(room =>{\n      this.setState({\n        roomId: room.id\n      })\n      this.getRooms()\n    })\n\n  }\n\n  sendMessage(text){\n    this.currentUser.sendMessage({\n      text,\n      roomId: this.state.roomId\n  })\n}\n\n  createRoom(name){\n    this.currentUser.createRoom({\n      name\n    })\n    .then(room => this.subscribeToRoom(room.id))\n  }\n\n  render() {\n    console.log('Messages', this.state.messages)\n    return (\n      <div className=\"App\">\n    <RoomList\n      roomId = {this.state.roomId}\n      subscribeToRoom={this.subscribeToRoom}\n      rooms={[...this.state.joinableRooms,...this.state.joinedRooms]}\n      />\n    <MessageList\n      roomId={this.state.roomId}\n      messages={this.state.messages}/>\n    <SendMessageForm\n      disabled = {!this.state.roomId}\n      sendMessage={this.sendMessage} />\n    <NewRoomForm createRoom={this.createRoom}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const tokenURL=\"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/b4c7574a-3d5c-4296-ad56-c0f1839627a1/token\"\n\nconst instanceLocator = \"v1:us1:b4c7574a-3d5c-4296-ad56-c0f1839627a1\"\n\nexport {tokenURL, instanceLocator}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}